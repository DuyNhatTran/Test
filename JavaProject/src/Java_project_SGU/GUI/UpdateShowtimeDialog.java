/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Java_project_SGU.GUI;

import Java_project_SGU.DAL.ReadRoomSqlImp;
import Java_project_SGU.DAL.Write_ReadMovieToSqlImp;
import Java_project_SGU.Controller.FocusListenerAddShowtimeDialog;
import Java_project_SGU.Controller.FocusListenerUpdateShowtimeDialog;
import Java_project_SGU.Exception.InfoFilterImp;
import Java_project_SGU.Exception.InvalidBirthdayException;
import Java_project_SGU.Exception.InvalidHoursException;
import Java_project_SGU.Exception.InvalidMoneyException;
import Java_project_SGU.BUS.ClassListMovie;
import Java_project_SGU.BUS.ClassListRoom;
import Java_project_SGU.BUS.ClassListShowTime;
import Java_project_SGU.BUS.Movie;
import Java_project_SGU.BUS.Room;
import Java_project_SGU.BUS.ShowTime;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ADMIN
 */
public class UpdateShowtimeDialog extends javax.swing.JDialog implements ActionListener {

    private ShowTime showTimeUpdate;
    private ClassListMovie classListMovie;
    private ClassListRoom classListRoom;
    private ClassListShowTime classListShowTime;

    private ComboBoxModel<String> roomCBModel;
    private ComboBoxModel<String> fomartMovieCBCBModel;
    private ComboBoxModel<String> nameMovieCBModel;
    
    private ManageEmployeeFrm manageEmployeeFrm;

    /**
     * Creates new form UpdateShowtimeDialog
     */
    public UpdateShowtimeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addActionListener();
        this.setLocationRelativeTo(null);
        this.roomCBModel = this.roomShowTimeCB.getModel();
        this.fomartMovieCBCBModel = this.fomartMovieCB.getModel();
        this.nameMovieCBModel = this.nameMovieCB.getModel();
    }

    UpdateShowtimeDialog(java.awt.Frame parent, boolean modal,
            ShowTime showTimeUpdate, ManageEmployeeFrm manageEmployeeFrm) {
        this(parent, modal);
        loadDataFromSQL();
        initNameMovieCB();
        this.showTimeUpdate = showTimeUpdate;
        renderShowTimeUpdateToFrom();
        this.manageEmployeeFrm = manageEmployeeFrm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startDateTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        startHourTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ticketPriceTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameMovieTxt = new javax.swing.JLabel();
        startDateLB = new javax.swing.JLabel();
        startHourLB = new javax.swing.JLabel();
        roomLB = new javax.swing.JLabel();
        ticketPriceLB = new javax.swing.JLabel();
        nameMovieCB = new javax.swing.JComboBox<>();
        fomartMovieCB = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        posterLB = new javax.swing.JLabel();
        updateShowtimeBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        roomShowTimeCB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Tên phim");

        startDateTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startDateTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Suất chiếu (hh:mm)");

        startHourTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startHourTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        startHourTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startHourTxtActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Phòng chiếu");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Giá vé (VNĐ)");

        ticketPriceTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ticketPriceTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Mô tả");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nameMovieTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameMovieTxt.setText("Tên phim:");

        startDateLB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startDateLB.setText("Ngày chiếu: ");

        startHourLB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        startHourLB.setText("Giờ chiếu: ");

        roomLB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomLB.setText("Phòng chiếu: ");

        ticketPriceLB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ticketPriceLB.setText("Giá vé:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nameMovieTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(307, 307, 307))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(startHourLB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startDateLB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ticketPriceLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roomLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(58, 58, 58))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(nameMovieTxt)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomLB)
                    .addComponent(startDateLB))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startHourLB)
                    .addComponent(ticketPriceLB))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        nameMovieCB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameMovieCB.setBorder(null);
        nameMovieCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameMovieCBActionPerformed(evt);
            }
        });

        fomartMovieCB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fomartMovieCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2D", "3D" }));
        fomartMovieCB.setSelectedIndex(-1);
        fomartMovieCB.setBorder(null);
        fomartMovieCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fomartMovieCBActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Loại phim");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Ngày chiếu (dd/mm/yyyy)");

        posterLB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(posterLB, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 367, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(posterLB, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        updateShowtimeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        updateShowtimeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/edit.png"))); // NOI18N
        updateShowtimeBtn.setText("Cập nhập");

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/bin.png"))); // NOI18N
        jButton2.setText("Hủy");

        roomShowTimeCB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomShowTimeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ROOM1", "ROOM2", "ROOM3", "ROOM4", "ROOM5" }));
        roomShowTimeCB.setSelectedIndex(-1);
        roomShowTimeCB.setToolTipText("");
        roomShowTimeCB.setBorder(null);
        roomShowTimeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomShowTimeCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel4)
                                    .addComponent(fomartMovieCB, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(nameMovieCB, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roomShowTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(ticketPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(startHourTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(startDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(updateShowtimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel5)
                                .addGap(3, 3, 3)
                                .addComponent(ticketPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel3)
                                .addGap(5, 5, 5)
                                .addComponent(startHourTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(5, 5, 5)
                                .addComponent(roomShowTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel13)
                                .addGap(5, 5, 5)
                                .addComponent(fomartMovieCB, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel1)
                                .addGap(5, 5, 5)
                                .addComponent(nameMovieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(updateShowtimeBtn))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startHourTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startHourTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startHourTxtActionPerformed

    private void nameMovieCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameMovieCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameMovieCBActionPerformed

    private void fomartMovieCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fomartMovieCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fomartMovieCBActionPerformed

    private void roomShowTimeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomShowTimeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomShowTimeCBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateShowtimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateShowtimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateShowtimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateShowtimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdateShowtimeDialog dialog = new UpdateShowtimeDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> fomartMovieCB;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> nameMovieCB;
    private javax.swing.JLabel nameMovieTxt;
    private javax.swing.JLabel posterLB;
    private javax.swing.JLabel roomLB;
    private javax.swing.JComboBox<String> roomShowTimeCB;
    private javax.swing.JLabel startDateLB;
    private javax.swing.JTextField startDateTxt;
    private javax.swing.JLabel startHourLB;
    private javax.swing.JTextField startHourTxt;
    private javax.swing.JLabel ticketPriceLB;
    private javax.swing.JTextField ticketPriceTxt;
    private javax.swing.JButton updateShowtimeBtn;
    // End of variables declaration//GEN-END:variables

    private void renderShowTimeUpdateToFrom() {
        for (int i = 0; i < this.roomCBModel.getSize(); i++) {
            if (this.showTimeUpdate.getRoom().getIdRoom().
                    equals(roomCBModel.getElementAt(i))) {
                this.roomShowTimeCB.setSelectedIndex(i);
                updateRoomLB();
            }
        }
        for (int i = 0; i < this.fomartMovieCBCBModel.getSize(); i++) {
            if (this.showTimeUpdate.getMovieFomart().
                    equals(fomartMovieCBCBModel.getElementAt(i))) {
                this.fomartMovieCB.setSelectedIndex(i);
            }
        }
        for (int i = 0; i < this.nameMovieCBModel.getSize(); i++) {
            if (this.showTimeUpdate.getMovie().getNameMovie().
                    equals(nameMovieCBModel.getElementAt(i))) {
                this.nameMovieCB.setSelectedIndex(i);
                updateMovieLB();
            }
        }

        this.startDateTxt.setText(new SimpleDateFormat("dd/MM/yyyy").
                format(this.showTimeUpdate.getStartTime()));
        this.startDateLB.setText("Ngày chiếu: " + new SimpleDateFormat("dd/MM/yyyy").
                format(this.showTimeUpdate.getStartTime()));
        this.ticketPriceTxt.setText(String.valueOf(this.showTimeUpdate.getTicketPrice()));
        this.ticketPriceLB.setText("Giá vé: " + 
                String.valueOf(this.showTimeUpdate.getTicketPrice()));
        this.startHourTxt.setText(new SimpleDateFormat("HH:mm").
                format(this.showTimeUpdate.getStartTime()));
        this.startHourLB.setText("Giờ chiếu: " + new SimpleDateFormat("HH:mm").
                format(this.showTimeUpdate.getStartTime()));
    }

    private void initNameMovieCB() {
        for (Movie movie : classListMovie.getMovies()) {
            this.nameMovieCB.addItem(movie.getNameMovie());
        }
        this.nameMovieCB.setSelectedIndex(-1);
    }

    private void loadDataFromSQL() {
        this.classListMovie = new ClassListMovie();
        classListRoom = new ClassListRoom();
        Write_ReadMovieToSqlImp wrMovieSQL = new Write_ReadMovieToSqlImp();
        ReadRoomSqlImp readRoomSQL = new ReadRoomSqlImp();
        this.classListMovie.setMovies(wrMovieSQL.readMovieFromDS());
        this.classListRoom.setRooms(readRoomSQL.getRoomsFromSql());
    }

    public void setStartDateLB() {
        try {
            String startDateStr = startDateTxt.getText();
            InfoFilterImp ifFilter = new InfoFilterImp();
            if (ifFilter.isBirthdayValid(startDateStr)) {
                this.startDateLB.setText("Ngày chiếu: " + startDateStr);
            }
        } catch (InvalidBirthdayException ex) {
            this.startDateLB.setText("Ngày chiếu: ");
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    public void setHourDateLB() {
        try {
            String startHourTime = this.startHourTxt.getText().trim();
            InfoFilterImp infoFilter = new InfoFilterImp();
            if (infoFilter.isHourValid(startHourTime)) {
                this.startHourLB.setText("Giờ chiếu: " + startHourTime);
            }
        } catch (InvalidHoursException ex) {
            this.startHourLB.setText("Giờ chiếu: ");
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    public void setTicketPriceLB() {
        DecimalFormat formatter = new DecimalFormat("###,###,###.##");
        String ticketPriceStr = ticketPriceTxt.getText().trim();
        InfoFilterImp infoFilter = new InfoFilterImp();
        try {
            if (infoFilter.isMoneyValid(ticketPriceStr)) {
                Float ticketPriceFloat = Float.parseFloat(ticketPriceStr);
                this.ticketPriceLB.setText("Giá vé: " + formatter.format(ticketPriceFloat) + " (VNĐ)");
            }
        } catch (InvalidMoneyException ex) {
            this.ticketPriceLB.setText("Giá vé: ");
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if ((src.equals(this.nameMovieCB.getModel().getSelectedItem()))) {
            System.out.println("ok");
        } else if (src.equals(this.nameMovieCB)) {
            updateMovieLB();
        } else if (src.equals(this.roomShowTimeCB)) {
            updateRoomLB();
        } else if (src.equals(this.updateShowtimeBtn)) {
            upDateShowTime();
        }
    }
    
    public void updateRoomLB() {
        String room = roomShowTimeCB.getSelectedItem().toString();
        this.roomLB.setText("Phòng chiếu: " + room);
    }

    public void updateMovieLB() {
        if (this.nameMovieCB.getSelectedIndex() > -1) {
            String nameMovieSelect = this.nameMovieCB.getSelectedItem().toString();
            this.nameMovieTxt.setText("Tên phim: " + nameMovieSelect);
            Movie movieSelect = getMovieFromNameCB();
            this.posterLB.setIcon(new ImageIcon(movieSelect.getLinkImage()));
        }
    }

    private Movie getMovieFromNameCB() {
        String nameMovie = nameMovieCB.getSelectedItem().toString();
        for (Movie movie : classListMovie.getMovies()) {
            if (movie.getNameMovie().equals(nameMovie)) {
                return movie;
            }
        }
        return null;
    }

    private void addActionListener() {
        FocusListenerUpdateShowtimeDialog focusListener = 
                new  FocusListenerUpdateShowtimeDialog(this);
        this.nameMovieCB.addActionListener(this);
        this.roomShowTimeCB.addActionListener(this);
        this.startDateTxt.addFocusListener(focusListener);
        this.startHourTxt.addFocusListener(focusListener);
        this.ticketPriceTxt.addFocusListener(focusListener);
        this.updateShowtimeBtn.addActionListener(this);
    }
    
     private void upDateShowTime() {
        String roomId = "";
        if (this.roomShowTimeCB.getSelectedIndex() > -1) {
            roomId = this.roomCBModel.getSelectedItem().toString();
        }
        
        Room roomShowTime = null;
        for (Room room : classListRoom.getRooms()) {
           if( room.getIdRoom().equals(roomId)) {
               roomShowTime = room;
           }
        }
        
        String fomartMovie = fomartMovieCB.getSelectedItem().toString();
        
        Movie movieShowTime = getMovieFromNameCB();
        
        String startDate = this.startDateTxt.getText();
        String startHour = this.startHourTxt.getText();

        String startTime = startHour + " " + startDate;
        int priceTicket = 0;
        if (!ticketPriceTxt.getText().isEmpty()) {
            priceTicket = Integer.parseInt(ticketPriceTxt.getText());
        }
        
        if (roomId.isEmpty() || fomartMovie.isEmpty() || movieShowTime == null
                || startDate.isEmpty() || startHour.isEmpty() ||
                ticketPriceTxt.getText().isEmpty() || 
                this.roomShowTimeCB.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "VUI LÒNG "
                    + "ĐIỀN ĐẦY ĐỦ THÔNG TIN!");
        } else {
            ShowTime showTime = new ShowTime(showTimeUpdate.getIdShowTime(),
                    startTime, movieShowTime, roomShowTime, 
                    fomartMovie, priceTicket, false);
            System.out.println(showTime.getIdShowTime());
            this.manageEmployeeFrm.updateShowtimeCallBack(showTime);
            JOptionPane.showMessageDialog(rootPane,
                    "CẬP NHẬP SUẤT CHIẾU THÀNH CÔNG!");
        }
    }

    public JTextField getStartDateTxt() {
        return this.startDateTxt;
    }

    public JTextField getTicketPriceTxt() {
        return ticketPriceTxt;
    }

    public JTextField getStartHourTxt() {
        return startHourTxt;
    }
}