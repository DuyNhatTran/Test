/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Java_project_SGU.GUI;

import Java_project_SGU.BUS.ClassListMovie;
import Java_project_SGU.DAL.ReadCusSqlImp;
import Java_project_SGU.DAL.WriteCusSqlImp;
import Java_project_SGU.DAL.WriteReadShowTimeSQLImp;
import Java_project_SGU.DAL.Write_ReadMovieToSqlImp;
import Java_project_SGU.Controller.CustomerControllerImp;
import Java_project_SGU.Controller.MouseActionlistenerAdminPage;
import Java_project_SGU.Exception.InfoFilter;
import Java_project_SGU.Exception.InfoFilterImp;
import Java_project_SGU.Exception.InvalidBirthdayException;
import Java_project_SGU.Exception.InvalidPhoneException;
import Java_project_SGU.BUS.ClassListShowTime;
import Java_project_SGU.BUS.Customer;
import Java_project_SGU.BUS.Movie;
import Java_project_SGU.BUS.ShowTime;
import Java_project_SGU.BUS.Staff;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class ManageEmployeeFrm extends javax.swing.JFrame implements ActionListener {
    //ClassListArea
    private ClassListMovie classListMovie;
    private ClassListShowTime classListShowTime;
    private List<Customer> customers;
    private Staff staff;
    
    //tableArea
    private DefaultTableModel tableModelMovie;
    private int selectRowMovie;
    private DefaultTableModel tableModelCustomer;
    private int selectRowTableCus;
    private DefaultTableModel tableModelAllRoom;
    private int selectRowTableSTALL;
    private DefaultTableModel tableModelRoom1;
    private int selectRowTableST1;
    private DefaultTableModel tableModelRoom2;
    private int selectRowTableST2;
    private DefaultTableModel tableModelRoom3;
    private int selectRowTableST3;
    private DefaultTableModel tableModelRoom4;
    private int selectRowTableST4;
    private DefaultTableModel tableModelRoom5;
    private int selectRowTableST5;
    
    //others
    private CustomerControllerImp customerControllerImp;

    /**
     * Creates new form ManageEmployeeFrm
     */
    public ManageEmployeeFrm() {
        classListShowTime = new ClassListShowTime();
        classListMovie = new ClassListMovie();
        initComponents();
        this.setLocationRelativeTo(null);
        addActionListener();
        tableModelCustomer = (DefaultTableModel) cusTable.getModel();
        tableModelMovie = (DefaultTableModel) movieTable.getModel();
        tableModelAllRoom = (DefaultTableModel) roomAllTable.getModel();
        tableModelRoom1 = (DefaultTableModel) room1Table.getModel();
        tableModelRoom2 = (DefaultTableModel) room2Table.getModel();
        tableModelRoom3 = (DefaultTableModel) room3Table.getModel();
        tableModelRoom4 = (DefaultTableModel) room4Table.getModel();
        tableModelRoom5 = (DefaultTableModel) room5Table.getModel();
        loadDataFromSql();
        
        selectRowTableCus = -1;
        selectRowMovie = -1;
        selectRowTableSTALL = -1;
        selectRowTableST1 = -1;
        selectRowTableST2 = -1;
        selectRowTableST3 = -1;
        selectRowTableST4 = -1;
        selectRowTableST5 = -1;
        
        customerControllerImp = new CustomerControllerImp();
        addBtnGroupSort();
        addBtnGroupSearch();
        loadMovieToTables();
    }

    public ManageEmployeeFrm(List<Customer> customers, Staff staff) {
        this();
        this.customers = customers;
        this.staff = staff;
        loadDataToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        sortBtnGroup = new javax.swing.ButtonGroup();
        searchBtnGroup = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        optionPN = new javax.swing.JPanel();
        dataPN = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        customerPN = new javax.swing.JPanel();
        textCusLB = new javax.swing.JLabel();
        iconCusLB = new javax.swing.JLabel();
        roomPN = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        foodLB = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        adminArea = new javax.swing.JTabbedPane();
        cusPage = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        sortNameCusDESCRb = new javax.swing.JRadioButton();
        sortStartDateCusASC = new javax.swing.JRadioButton();
        sortNameCusASCRb = new javax.swing.JRadioButton();
        sortStartDateCusDESC = new javax.swing.JRadioButton();
        jPanel12 = new javax.swing.JPanel();
        nameSearchRB = new javax.swing.JRadioButton();
        nameSearchTxt = new javax.swing.JTextField();
        startDateSearchRB = new javax.swing.JRadioButton();
        toStartDateTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fromStartDateTxt = new javax.swing.JTextField();
        findBtn = new javax.swing.JButton();
        phoneNumberRB = new javax.swing.JRadioButton();
        phoneNumberTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        cusTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        removeBtn = new javax.swing.JButton();
        addCusBtn = new javax.swing.JButton();
        updateCusBtn = new javax.swing.JButton();
        refreshPageBtn = new javax.swing.JButton();
        dataPage = new javax.swing.JPanel();
        foodPage = new javax.swing.JPanel();
        MoviePage = new javax.swing.JPanel();
        searchMovieTxt = new javax.swing.JTextField();
        searchMovieBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        movieTable = new javax.swing.JTable();
        btnAddMovie = new javax.swing.JButton();
        updateMovieBtn = new javax.swing.JButton();
        deleteMovieBtn = new javax.swing.JButton();
        refreshMovieBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        roomAllTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        room1Table = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        room2Table = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        room3Table = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        room4Table = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        room5Table = new javax.swing.JTable();
        searchShowTimeTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        searchCalendarSTTxt = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        addShowtimeBtn = new javax.swing.JButton();
        upDateShowTimeBtn = new javax.swing.JButton();
        deleteShowTimeBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setSize(new java.awt.Dimension(1440, 780));

        jButton1.setText("jButton1");

        optionPN.setBackground(new java.awt.Color(204, 204, 204));
        optionPN.setMinimumSize(new java.awt.Dimension(174, 694));
        optionPN.setPreferredSize(new java.awt.Dimension(174, 694));

        dataPN.setBackground(new java.awt.Color(255, 255, 255));
        dataPN.setPreferredSize(new java.awt.Dimension(200, 100));
        dataPN.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                dataPNAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Dữ liệu");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout dataPNLayout = new javax.swing.GroupLayout(dataPN);
        dataPN.setLayout(dataPNLayout);
        dataPNLayout.setHorizontalGroup(
            dataPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dataPNLayout.setVerticalGroup(
            dataPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataPNLayout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        customerPN.setBackground(new java.awt.Color(255, 255, 255));
        customerPN.setPreferredSize(new java.awt.Dimension(200, 100));

        textCusLB.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        textCusLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textCusLB.setText("khách hàng");
        textCusLB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        iconCusLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconCusLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/customer.png"))); // NOI18N

        javax.swing.GroupLayout customerPNLayout = new javax.swing.GroupLayout(customerPN);
        customerPN.setLayout(customerPNLayout);
        customerPNLayout.setHorizontalGroup(
            customerPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textCusLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(customerPNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconCusLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        customerPNLayout.setVerticalGroup(
            customerPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconCusLB, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textCusLB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        roomPN.setBackground(new java.awt.Color(255, 255, 255));
        roomPN.setPreferredSize(new java.awt.Dimension(200, 100));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/room_icon.png"))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Lịch Chiếu");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout roomPNLayout = new javax.swing.GroupLayout(roomPN);
        roomPN.setLayout(roomPNLayout);
        roomPNLayout.setHorizontalGroup(
            roomPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomPNLayout.createSequentialGroup()
                .addGroup(roomPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jLabel6)
                .addGap(0, 0, 0))
        );
        roomPNLayout.setVerticalGroup(
            roomPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPNLayout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(roomPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomPNLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomPNLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );

        foodLB.setBackground(new java.awt.Color(255, 255, 255));
        foodLB.setPreferredSize(new java.awt.Dimension(200, 100));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/food_icon.png"))); // NOI18N

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("THỨC ĂN");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout foodLBLayout = new javax.swing.GroupLayout(foodLB);
        foodLB.setLayout(foodLBLayout);
        foodLBLayout.setHorizontalGroup(
            foodLBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, foodLBLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        foodLBLayout.setVerticalGroup(
            foodLBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodLBLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setPreferredSize(new java.awt.Dimension(200, 100));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("PHIM");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/movie_icon.png"))); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setPreferredSize(new java.awt.Dimension(200, 100));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("NHÂN SỰ");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/staff_icon.png"))); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setPreferredSize(new java.awt.Dimension(200, 100));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 94, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout optionPNLayout = new javax.swing.GroupLayout(optionPN);
        optionPN.setLayout(optionPNLayout);
        optionPNLayout.setHorizontalGroup(
            optionPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataPN, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(foodLB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(roomPN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(customerPN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                .addContainerGap())
        );
        optionPNLayout.setVerticalGroup(
            optionPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataPN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(customerPN, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(roomPN, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(foodLB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        adminArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        sortNameCusDESCRb.setText("Theo tên khách hàng z -a");
        sortNameCusDESCRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortNameCusDESCRbActionPerformed(evt);
            }
        });

        sortStartDateCusASC.setText("Theo ngày đăng kí gần nhất");

        sortNameCusASCRb.setText("Theo tên khách hàng a - z");

        sortStartDateCusDESC.setText("Theo ngày đăng kí xa nhất");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortNameCusASCRb)
                    .addComponent(sortNameCusDESCRb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sortStartDateCusASC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sortStartDateCusDESC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortNameCusASCRb)
                    .addComponent(sortStartDateCusASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortNameCusDESCRb)
                    .addComponent(sortStartDateCusDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        nameSearchRB.setText("Theo tên:");

        nameSearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSearchTxtActionPerformed(evt);
            }
        });

        startDateSearchRB.setText("Theo ngày đăng kí từ ngày:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("đến:");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        findBtn.setText("Tìm");

        phoneNumberRB.setText("Theo số điện thoại:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startDateSearchRB, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(nameSearchRB, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneNumberRB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(fromStartDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(phoneNumberTxt))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(findBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(toStartDateTxt))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSearchRB)
                    .addComponent(nameSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDateSearchRB)
                    .addComponent(toStartDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(fromStartDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findBtn)
                    .addComponent(phoneNumberRB)
                    .addComponent(phoneNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TÊN KHÁCH HÀNG", "GIỚI TÍNH", "NGÀY SINH", "SỐ ĐIỆN THOẠI", "ĐỊA CHỈ", "EMAIL", "NGÀY ĐĂNG KÍ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cusTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cusTable.setShowGrid(true);
        jScrollPane1.setViewportView(cusTable);
        if (cusTable.getColumnModel().getColumnCount() > 0) {
            cusTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            cusTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            cusTable.getColumnModel().getColumn(2).setPreferredWidth(15);
            cusTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            cusTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            cusTable.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("DANH SÁCH KHÁCH HÀNG");

        removeBtn.setText("XÓA KHÁCH HÀNG");

        addCusBtn.setText("THÊM KHÁCH HÀNG");

        updateCusBtn.setText("SỮA KHÁCH HÀNG");

        refreshPageBtn.setText("Làm Mới Trang");

        javax.swing.GroupLayout cusPageLayout = new javax.swing.GroupLayout(cusPage);
        cusPage.setLayout(cusPageLayout);
        cusPageLayout.setHorizontalGroup(
            cusPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cusPageLayout.createSequentialGroup()
                .addGroup(cusPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cusPageLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(cusPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(cusPageLayout.createSequentialGroup()
                                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1079, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cusPageLayout.createSequentialGroup()
                                .addComponent(addCusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(updateCusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(114, 114, 114)
                                .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(114, 114, 114)
                                .addComponent(refreshPageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(cusPageLayout.createSequentialGroup()
                        .addGap(493, 493, 493)
                        .addComponent(jLabel4)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        cusPageLayout.setVerticalGroup(
            cusPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cusPageLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(cusPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cusPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshPageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        adminArea.addTab("KHÁCH HÀNG", cusPage);

        javax.swing.GroupLayout dataPageLayout = new javax.swing.GroupLayout(dataPage);
        dataPage.setLayout(dataPageLayout);
        dataPageLayout.setHorizontalGroup(
            dataPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1284, Short.MAX_VALUE)
        );
        dataPageLayout.setVerticalGroup(
            dataPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );

        adminArea.addTab("DỮ LIỆU", dataPage);

        javax.swing.GroupLayout foodPageLayout = new javax.swing.GroupLayout(foodPage);
        foodPage.setLayout(foodPageLayout);
        foodPageLayout.setHorizontalGroup(
            foodPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1284, Short.MAX_VALUE)
        );
        foodPageLayout.setVerticalGroup(
            foodPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );

        adminArea.addTab("THỨC ĂN", foodPage);

        searchMovieTxt.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        searchMovieTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        searchMovieTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMovieTxtActionPerformed(evt);
            }
        });

        searchMovieBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        searchMovieBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/search.png"))); // NOI18N
        searchMovieBtn.setText("Tìm kiếm");
        searchMovieBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMovieBtnActionPerformed(evt);
            }
        });

        movieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phim", "Tên phim", "Tuổi giới hạn", "Quốc gia", "Thể loại", "Thời lượng", "Ngày chiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(movieTable);
        if (movieTable.getColumnModel().getColumnCount() > 0) {
            movieTable.getColumnModel().getColumn(0).setMinWidth(100);
            movieTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            movieTable.getColumnModel().getColumn(0).setMaxWidth(100);
            movieTable.getColumnModel().getColumn(1).setMinWidth(250);
            movieTable.getColumnModel().getColumn(1).setPreferredWidth(250);
            movieTable.getColumnModel().getColumn(1).setMaxWidth(250);
        }

        btnAddMovie.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnAddMovie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/add.png"))); // NOI18N
        btnAddMovie.setText("Thêm");
        btnAddMovie.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateMovieBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        updateMovieBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/edit.png"))); // NOI18N
        updateMovieBtn.setText("Sửa");
        updateMovieBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateMovieBtn.setMaximumSize(new java.awt.Dimension(89, 34));
        updateMovieBtn.setMinimumSize(new java.awt.Dimension(89, 34));
        updateMovieBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMovieBtnActionPerformed(evt);
            }
        });

        deleteMovieBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        deleteMovieBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/bin.png"))); // NOI18N
        deleteMovieBtn.setText("Xóa");
        deleteMovieBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteMovieBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMovieBtnActionPerformed(evt);
            }
        });

        refreshMovieBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        refreshMovieBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/refresh-icon.png"))); // NOI18N
        refreshMovieBtn.setText("Làm Mới Trang");
        refreshMovieBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout MoviePageLayout = new javax.swing.GroupLayout(MoviePage);
        MoviePage.setLayout(MoviePageLayout);
        MoviePageLayout.setHorizontalGroup(
            MoviePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoviePageLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(MoviePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MoviePageLayout.createSequentialGroup()
                        .addComponent(searchMovieTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchMovieBtn)
                        .addGap(73, 73, 73)
                        .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(deleteMovieBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(updateMovieBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshMovieBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MoviePageLayout.setVerticalGroup(
            MoviePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoviePageLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(MoviePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchMovieTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchMovieBtn)
                    .addComponent(btnAddMovie)
                    .addComponent(updateMovieBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteMovieBtn)
                    .addComponent(refreshMovieBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        adminArea.addTab("PHIM", MoviePage);

        jTabbedPane7.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        roomAllTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phim", "Loại phim", "Thời lượng", "Giờ chiếu", "Phòng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(roomAllTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane7.addTab("Toàn bộ", jPanel1);

        room1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phim", "Loại phim", "Thời lượng", "Giờ chiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(room1Table);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("Phòng 1", jPanel5);

        room2Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phim", "Loại phim", "Thời lượng", "Giờ chiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(room2Table);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("Phòng 2", jPanel6);

        room3Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phim", "Loại phim", "Thời lượng", "Giờ chiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(room3Table);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("Phòng 3", jPanel7);

        room4Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phim", "Loại phim", "Thời lượng", "Giờ chiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(room4Table);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("Phòng 4", jPanel13);

        room5Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phim", "Loại phim", "Thời lượng", "Giờ chiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(room5Table);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("Phòng 5", jPanel14);

        searchShowTimeTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchShowTimeTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/search.png"))); // NOI18N
        jButton2.setText("Tìm kiếm");

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/calendar.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(searchCalendarSTTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchCalendarSTTxt)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        addShowtimeBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addShowtimeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/add.png"))); // NOI18N
        addShowtimeBtn.setText("Thêm");

        upDateShowTimeBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        upDateShowTimeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/edit.png"))); // NOI18N
        upDateShowTimeBtn.setText("Sửa");
        upDateShowTimeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upDateShowTimeBtnActionPerformed(evt);
            }
        });

        deleteShowTimeBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteShowTimeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/bin.png"))); // NOI18N
        deleteShowTimeBtn.setText("Xóa");

        refreshBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/refresh-icon.png"))); // NOI18N
        refreshBtn.setText("Làm Mới");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(searchShowTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addShowtimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(upDateShowTimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(deleteShowTimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(80, 80, 80))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchShowTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(refreshBtn))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addComponent(jTabbedPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteShowTimeBtn)
                    .addComponent(upDateShowTimeBtn)
                    .addComponent(addShowtimeBtn))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        adminArea.addTab("XUẤT CHIẾU", jPanel4);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1284, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );

        adminArea.addTab("THỐNG KÊ", jPanel16);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/mene_icon.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("TRANG ADMIN");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1072, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(optionPN, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 1296, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adminArea, javax.swing.GroupLayout.PREFERRED_SIZE, 1284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 712, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(optionPN, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 43, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(adminArea, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(21, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataPNAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_dataPNAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_dataPNAncestorAdded

    private void sortNameCusDESCRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortNameCusDESCRbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortNameCusDESCRbActionPerformed

    private void nameSearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSearchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameSearchTxtActionPerformed

    private void searchMovieTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMovieTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchMovieTxtActionPerformed

    private void searchMovieBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMovieBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchMovieBtnActionPerformed

    private void updateMovieBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMovieBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateMovieBtnActionPerformed

    private void deleteMovieBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMovieBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteMovieBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void upDateShowTimeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upDateShowTimeBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_upDateShowTimeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Window Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageEmployeeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MoviePage;
    private javax.swing.JButton addCusBtn;
    private javax.swing.JButton addShowtimeBtn;
    private javax.swing.JTabbedPane adminArea;
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JPanel cusPage;
    private javax.swing.JTable cusTable;
    private javax.swing.JPanel customerPN;
    private javax.swing.JPanel dataPN;
    private javax.swing.JPanel dataPage;
    private javax.swing.JButton deleteMovieBtn;
    private javax.swing.JButton deleteShowTimeBtn;
    private javax.swing.JButton findBtn;
    private javax.swing.JPanel foodLB;
    private javax.swing.JPanel foodPage;
    private javax.swing.JTextField fromStartDateTxt;
    private javax.swing.JLabel iconCusLB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTable movieTable;
    private javax.swing.JRadioButton nameSearchRB;
    private javax.swing.JTextField nameSearchTxt;
    private javax.swing.JPanel optionPN;
    private javax.swing.JRadioButton phoneNumberRB;
    private javax.swing.JTextField phoneNumberTxt;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton refreshMovieBtn;
    private javax.swing.JButton refreshPageBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JTable room1Table;
    private javax.swing.JTable room2Table;
    private javax.swing.JTable room3Table;
    private javax.swing.JTable room4Table;
    private javax.swing.JTable room5Table;
    private javax.swing.JTable roomAllTable;
    private javax.swing.JPanel roomPN;
    private javax.swing.ButtonGroup searchBtnGroup;
    private javax.swing.JTextField searchCalendarSTTxt;
    private javax.swing.JButton searchMovieBtn;
    private javax.swing.JTextField searchMovieTxt;
    private javax.swing.JTextField searchShowTimeTxt;
    private javax.swing.ButtonGroup sortBtnGroup;
    private javax.swing.JRadioButton sortNameCusASCRb;
    private javax.swing.JRadioButton sortNameCusDESCRb;
    private javax.swing.JRadioButton sortStartDateCusASC;
    private javax.swing.JRadioButton sortStartDateCusDESC;
    private javax.swing.JRadioButton startDateSearchRB;
    private javax.swing.JLabel textCusLB;
    private javax.swing.JTextField toStartDateTxt;
    private javax.swing.JButton upDateShowTimeBtn;
    private javax.swing.JButton updateCusBtn;
    private javax.swing.JButton updateMovieBtn;
    // End of variables declaration//GEN-END:variables

    public JPanel getCustomerLb() {
        return customerPN;
    }

    public JPanel getDataLb() {
        return dataPN;
    }

    public JPanel getRoomLb() {
        return roomPN;
    }

    public JPanel getFoodLB() {
        return foodLB;
    }

    public void showDataPage() {
        adminArea.setSelectedIndex(1);
    }

    public void showCustomerPage() {
        adminArea.setSelectedIndex(0);
    }

    public void showRoomPage() {
        adminArea.setSelectedIndex(2);
    }

    public void showFoodPage() {
        adminArea.setSelectedIndex(3);
    }

    private void addActionListener() {
        //Khách hàng
        MouseActionlistenerAdminPage mouserEvent
                = new MouseActionlistenerAdminPage(this);
        

        this.customerPN.addMouseListener(mouserEvent);
        this.dataPN.addMouseListener(mouserEvent);
        this.cusPage.addMouseListener(mouserEvent);
        this.roomPN.addMouseListener(mouserEvent);
        this.foodLB.addMouseListener(mouserEvent);
        this.nameSearchRB.addActionListener(this);
        this.startDateSearchRB.addActionListener(this);
        this.addCusBtn.addActionListener(this);
        this.removeBtn.addActionListener(this);
        this.sortNameCusASCRb.addActionListener(this);
        this.sortNameCusDESCRb.addActionListener(this);
        this.sortStartDateCusASC.addActionListener(this);
        this.sortStartDateCusDESC.addActionListener(this);
        this.findBtn.addActionListener(this);
        this.updateCusBtn.addActionListener(this);
        this.refreshPageBtn.addActionListener(this);
        this.phoneNumberRB.addActionListener(this);
        
        //Phim
        this.btnAddMovie.addActionListener(this);
        this.deleteMovieBtn.addActionListener(this);
        this.updateMovieBtn.addActionListener(this);
        this.refreshMovieBtn.addActionListener(this);
        this.searchMovieBtn.addActionListener(this);
        
        //Xuất chiếu
        this.addShowtimeBtn.addActionListener(this);
        this.deleteShowTimeBtn.addActionListener(this);
        this.upDateShowTimeBtn.addActionListener(this);
        this.refreshBtn.addActionListener(this);
        
        //Menu
    }

    private void loadDataToTable() {
        loadCustomersToTable(customers);
    }

    private void loadCustomersToTable(List<Customer> customers1) {
        tableModelCustomer.setRowCount(0);
        for (Customer customer : customers) {
            loadCustomerToTable(customer);
        }
    }

    private void loadCustomerToTable(Customer customer) {
        String sex = (customer.getSex()) ? "Nam" : "Nữ";
        Object[] row = new Object[]{
            customer.getId_customer(), customer.getFullName(), sex,
            new SimpleDateFormat("dd/MM/yyyy").format(customer.getBirthDay()),
            customer.getPhoneNumber(), customer.getAddress(), customer.getEmail(),
            new SimpleDateFormat("HH:mm:ss dd/MM/yyyy").format(customer.getStartDate())
        };
        tableModelCustomer.addRow(row);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //Khách hàng
        Object src = e.getSource();
        if (e.getSource().equals(addCusBtn)) {
            CustomerResigterDialog customerResigterDialog = new CustomerResigterDialog(this, rootPaneCheckingEnabled,
                    CustomerResigterDialog.WRITE_IN_ADMINPAGE);
            customerResigterDialog.setVisible(true);
        } else if (src.equals(removeBtn)) {
            removeCustomer();
        } else if (src.equals(dataPN)) {
            this.showDataPage();
        } else if (src.equals(customerPN)) {
            this.showCustomerPage();
        } else if (src.equals(roomPN)) {
            this.showRoomPage();
        } else if (e.getSource().equals(sortNameCusASCRb)) {
            customerControllerImp.sortCusByNameASC(customers);
            loadCustomerToTables();
        } else if (e.getSource().equals(sortNameCusDESCRb)) {
            customerControllerImp.sortCusByNameDESC(customers);
            loadCustomerToTables();
        } else if (e.getSource().equals(sortStartDateCusASC)) {
            customerControllerImp.sortCusByDateASC(customers);
            loadCustomerToTables();
        } else if (e.getSource().equals(sortStartDateCusDESC)) {
            customerControllerImp.sortCusByDateDESC(customers);
            loadCustomerToTables();
        } else if (e.getSource().equals(nameSearchRB)) {
            setEnableNameArea();
        } else if (e.getSource().equals(phoneNumberRB)) {
            setEnablePhoneNumberArea();
        } else if (e.getSource().equals(startDateSearchRB)) {
            setEnableStartDateArea();
        } else if (src.equals(findBtn)) {
            searchFromOption();
        } else if (src.equals(updateCusBtn)) {
            upDateCustomer();
        } else if (src.equals(refreshPageBtn)) {
            refreshPage();
        } 
        
        //Phim
        else if (src.equals(btnAddMovie)) {
            AddMovieDialog addMovieDialog = new AddMovieDialog(this, true);
            addMovieDialog.setVisible(true);
        } else if (src.equals(deleteMovieBtn)) {
            deleteMovie();
        } else if (src.equals(updateMovieBtn)) {
            showUpdateMovieDialog();
        } else if (src.equals(refreshMovieBtn)) {
            refreshPageMovie();
        } else if (src.equals(searchMovieBtn)) {
            searchMovieByName();
        } 
        
        //xuất chiếu
        else if (src.equals(addShowtimeBtn)) {
            AddShowtimeDialog addShowtimeDialog = new 
                AddShowtimeDialog(this, rootPaneCheckingEnabled, this);
            addShowtimeDialog.setVisible(true);
        } else if (src.equals(this.deleteShowTimeBtn)) {
            deleteShowTime();
        } else if (src.equals(this.upDateShowTimeBtn)) {
            updateShowTime();
        } else if (src.equals(this.refreshBtn)) {
            refreshTableAllRoom();
            searchShowTimeTxt.setText("");
            searchCalendarSTTxt.setText("");
        }
        
        //Menu
        
    }

    void addNewCusCallBack(Customer customer) {
        this.customers.add(customer);
        loadCustomerToTable(customer);
        WriteCusSqlImp writeCusSqlImp = new WriteCusSqlImp();
        writeCusSqlImp.insertData(customer);
    }

    private void removeCustomer() {
        selectRowTableCus = cusTable.getSelectedRow();
        if (selectRowTableCus >= 0) {
            String confirmMsg = "BẠN MUỐN XÓA KHÁCH HÀNG NẢY KHÔNG?";
            int confirmResult = JOptionPane.showConfirmDialog(rootPane, confirmMsg);
            if (confirmResult == JOptionPane.YES_NO_OPTION) {
                JOptionPane.showMessageDialog(rootPane, "Khách hàng có tên "
                        + customers.get(selectRowTableCus).getFullName() + " đã được xóa!");
                tableModelCustomer.removeRow(selectRowTableCus);
                WriteCusSqlImp wirteCusSqlImp = new WriteCusSqlImp();
                wirteCusSqlImp.deleteCus(customers.
                        get(selectRowTableCus).getId_customer());
                customers.remove(selectRowTableCus);
            }
        } else {
            String msg = "HÃY CHỌN 1 KHÁCH HÀNG ĐỂ XÓA!";
            JOptionPane.showMessageDialog(rootPane, msg);
        }
    }

    private void loadCustomerToTables() {
        this.tableModelCustomer.setRowCount(0);
        Iterator var1 = this.customers.iterator();

        while (var1.hasNext()) {
            Customer customer = (Customer) var1.next();
            this.loadCustomerToTable(customer);
        }
    }

    private void addBtnGroupSort() {
        sortBtnGroup.add(sortNameCusASCRb);
        sortBtnGroup.add(sortNameCusDESCRb);
        sortBtnGroup.add(sortStartDateCusASC);
        sortBtnGroup.add(sortStartDateCusDESC);
    }

    private void setEnableNameArea() {
        this.nameSearchTxt.setEnabled(true);
        this.fromStartDateTxt.setEnabled(false);
        this.toStartDateTxt.setEnabled(false);
        this.phoneNumberTxt.setEnabled(false);
    }

    public void changeCusColorPN() {
        customerPN.setBackground(Color.LIGHT_GRAY);
    }

    public void setCusBackgroundDefault() {
        customerPN.setBackground(Color.WHITE);
    }

    public void changeDataColorPN() {
        dataPN.setBackground(Color.LIGHT_GRAY);
    }

    public void setDataBackgroundDefault() {
        dataPN.setBackground(Color.WHITE);
    }

    public void changeRoomColorPN() {
        roomPN.setBackground(Color.LIGHT_GRAY);
    }

    public void setRoomBackgroundDefault() {
        roomPN.setBackground(Color.WHITE);
    }

    public void changeFoodColorPN() {
        foodLB.setBackground(Color.LIGHT_GRAY);
    }

    public void setFoodBackgroundDefault() {
        foodLB.setBackground(Color.WHITE);
    }

    private void addBtnGroupSearch() {
        searchBtnGroup.add(nameSearchRB);
        searchBtnGroup.add(startDateSearchRB);
        searchBtnGroup.add(phoneNumberRB);
    }

    private void setEnableStartDateArea() {
        this.nameSearchTxt.setEnabled(false);
        this.fromStartDateTxt.setEnabled(true);
        this.toStartDateTxt.setEnabled(true);
        this.phoneNumberTxt.setEnabled(false);
    }

    private void searchFromOption() {
        ReadCusSqlImp readCusSqlImp = new ReadCusSqlImp();
        if (nameSearchRB.isSelected()) {
            String inputNameCus = nameSearchTxt.getText().trim();
            if (!inputNameCus.isEmpty()) {
                List<Customer> listCusFromSql = readCusSqlImp.readCustomersFromDataSource();
                this.customers = customerControllerImp.addCusByName(listCusFromSql, inputNameCus);
                this.nameSearchTxt.setText("");
                loadCustomersToTable(customers);
                JOptionPane.showMessageDialog(rootPane, "LỌC THÀNH CÔNG!");
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "VUI LÒNG NHẬP TÊN CẦN TÌM KIẾM!");
            }
        } else if (startDateSearchRB.isSelected()) {
            String frominputDate = fromStartDateTxt.getText().trim();
            String toinputDate = toStartDateTxt.getText().trim();
            if (!frominputDate.isEmpty() && !toinputDate.isEmpty()) {
                InfoFilter infoFilter = new InfoFilterImp();
                try {
                    if (infoFilter.isBirthdayValid(frominputDate)
                            && infoFilter.isBirthdayValid(toinputDate)) {
                        List<Customer> listCusFromSql = readCusSqlImp.readCustomersFromDataSource();
                this.customers = customerControllerImp.addCusByDate(listCusFromSql, frominputDate, toinputDate);
                this.fromStartDateTxt.setText("");
                this.toStartDateTxt.setText("");
                loadCustomersToTable(customers);
                JOptionPane.showMessageDialog(rootPane, "LỌC THÀNH CÔNG!");
                    }
                } catch (InvalidBirthdayException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "VUI LÒNG NHẬP THÔNG TIN CẦN TÌM KIẾM!");
            }
        } else if (phoneNumberRB.isSelected()) {
            String phoneNumberInput = phoneNumberTxt.getText();
            if (!phoneNumberInput.isEmpty()) {
                try {
                    if (new InfoFilterImp().isPhonePersonValid(phoneNumberInput)) {
                        Customer rsCustomer = customerControllerImp.addCusByPhoneNumber(customers, phoneNumberInput);
                        if (rsCustomer != null) {
                            this.phoneNumberTxt.setText("");
                            this.tableModelCustomer.setRowCount(0);
                            this.loadCustomerToTable(rsCustomer);
                            JOptionPane.showMessageDialog(rootPane, 
                                    "LỌC KHÁCH HÀNG THÀNH CÔNG!");
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "KHÔNG TÌM"
                                    + " THẤY KHÁCH HÀNG VỚI SỐ ĐIỆN THOẠI: " + phoneNumberInput);
                        }
                    }
                } catch (InvalidPhoneException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                }
                

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "VUI LÒNG NHẬP SỐ ĐIỆN THOẠI CẦN TÌM KIẾM KHÁCH HÀNG!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "VUI LÒNG PHƯƠNG THỨC TÌM KIẾM KHÁCH KHÀNG!");
        }
    }

    private void upDateCustomer() {
        selectRowTableCus = cusTable.getSelectedRow();
        if (selectRowTableCus > -1) {
            Customer customerUpdate = customers.get(selectRowTableCus);
            CustomerUpdateDialog customerUpdateDialog = new CustomerUpdateDialog(this, rootPaneCheckingEnabled, customerUpdate);
            customerUpdateDialog.setVisible(true);
        } else if (selectRowTableCus == -1) {
            JOptionPane.showMessageDialog(rootPane, "HÃY CHỌN 1 KHÁCH HÀNG ĐỂ CHỈNH SỮA!");
        }
    }

    void updateCusCallBack(Customer customer) {
        tableModelCustomer.removeRow(selectRowTableCus);
        String sex = (customer.getSex()) ? "Nam" : "Nữ";
        Object[] row = new Object[]{
            customer.getId_customer(), customer.getFullName(), sex,
            new SimpleDateFormat("dd/MM/yyyy").format(customer.getBirthDay()),
            customer.getPhoneNumber(), customer.getAddress(), customer.getEmail(),
            new SimpleDateFormat("HH:mm:ss dd/MM/yyyy").format(customer.getStartDate())
        };
        WriteCusSqlImp writeCusSqlImp = new WriteCusSqlImp();
        writeCusSqlImp.upDateCustomer(customer);
        tableModelCustomer.insertRow(selectRowTableCus, row);
        customers.set(selectRowTableCus, customer);
        selectRowTableCus = -1;
    }

    private void refreshPage() {
        this.sortBtnGroup.clearSelection();
        this.searchBtnGroup.clearSelection();
        this.nameSearchTxt.setText("");
        this.nameSearchTxt.setEnabled(true);
        this.fromStartDateTxt.setText("");
        this.fromStartDateTxt.setEnabled(true);
        this.toStartDateTxt.setText("");
        this.toStartDateTxt.setEnabled(true);
        this.phoneNumberTxt.setText("");
        this.phoneNumberTxt.setEnabled(true);
        ReadCusSqlImp readCusSqlImp = new ReadCusSqlImp();
        this.customers = readCusSqlImp.readCustomersFromDataSource();
        loadCustomerToTables();
    }

    private void setEnablePhoneNumberArea() {
        this.nameSearchTxt.setEnabled(false);
        this.fromStartDateTxt.setEnabled(false);
        this.toStartDateTxt.setEnabled(false);
        this.phoneNumberTxt.setEnabled(true);
    }
    
    void addMovieCallBack(Movie movie) {
        this.classListMovie.addMovie(movie);
        loadMovieToTable(movie);
        Write_ReadMovieToSqlImp write_ReadMovieToSqlImp = new Write_ReadMovieToSqlImp();
        write_ReadMovieToSqlImp.insertMovieDataToSql(movie);
    }

    private void loadMovieToTable(Movie movie) {
        Object[] row = new Object[] {
            movie.getIdMovie(), movie.getNameMovie(), movie.getAgeLimit() + "+",
            movie.getCountry(), movie.getTypeMovie(), movie.getTime(),
            new SimpleDateFormat("dd/MM/yyyy").format(movie.getOpeningDate())
        };
        tableModelMovie.addRow(row);
    }

    private void readMoviesFromSql() {
        Write_ReadMovieToSqlImp wrMovieSQL = new Write_ReadMovieToSqlImp();
        List<Movie> movies = wrMovieSQL.readMovieFromDS();
        this.classListMovie.setMovies(movies);
        upDateIdAutoMovie();
    }

    private void upDateIdAutoMovie() {
        int maxIdMovie = 0;
        for (Movie movie : this.classListMovie.getMovies()) {
            int idMovieTail = Integer.parseInt(movie.getIdMovie().substring(3));
            if (idMovieTail > maxIdMovie){
                maxIdMovie = idMovieTail;
            }
        }
        Movie.setIdMovieAuto(maxIdMovie + 1);
    }

    private void loadMovieToTables() {
        tableModelMovie.setRowCount(0);
        for (Movie movie : this.classListMovie.getMovies()) {
            loadMovieToTable(movie);
        }
    }

    private void deleteMovie() {
        this.selectRowMovie = movieTable.getSelectedRow();
        if (selectRowMovie > -1) {
            int rsConfirm = JOptionPane.showConfirmDialog(rootPane, "Bạn có "
                    + "chắc xóa? dữ liệu sẽ không được khôi phục!");
            if (rsConfirm == JOptionPane.OK_OPTION) {
                //Chú ý xóa SQL trước nếu không sẽ lỗi
                String nameMovieDelete = classListMovie.getMovies().
                        get(selectRowMovie).getNameMovie();
                Write_ReadMovieToSqlImp wrMovieSql = new Write_ReadMovieToSqlImp();
                wrMovieSql.deleteMovie(classListMovie.getMovies().get(selectRowMovie));
                this.tableModelMovie.removeRow(selectRowMovie);
                this.classListMovie.removeMovie(selectRowMovie);
                this.selectRowMovie = -1;
                JOptionPane.showMessageDialog(rootPane, "XÓA PHIM " 
                        + nameMovieDelete + " THÀNH CÔNG!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    "VUI LÒNG CHỌN PHIM BẠN MUỐN XÓA!");
        }
    }

    private void showUpdateMovieDialog() {
        this.selectRowMovie = movieTable.getSelectedRow();
        if (selectRowMovie > -1) {
            Movie movieUpdateObj = classListMovie.getMovies().get(selectRowMovie);
            MovieUpdateDialog updateMovieDialog = 
                    new MovieUpdateDialog(this, true, movieUpdateObj);
            updateMovieDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    "VUI LÒNG CHỌN 1 BỘ PHIM ĐỂ CẬP NHẬP!");
        }
    }

    void updateCallbackMovie(Movie movieUpdate) {
        classListMovie.updateMovie(selectRowMovie, movieUpdate);
        this.tableModelMovie.removeRow(selectRowMovie);
        Object[] rowUpdate = new Object[] {
            movieUpdate.getIdMovie(), movieUpdate.getNameMovie(), movieUpdate.getAgeLimit() + "+",
            movieUpdate.getCountry(), movieUpdate.getTypeMovie(), movieUpdate.getTime(),
            new SimpleDateFormat("dd/MM/yyyy").format(movieUpdate.getOpeningDate())
        };
        this.tableModelMovie.insertRow(selectRowMovie, rowUpdate);
        Write_ReadMovieToSqlImp wrMovieSQL = new Write_ReadMovieToSqlImp();
        wrMovieSQL.updateMovie(movieUpdate);
        selectRowMovie = -1;
    }

    private void refreshPageMovie() {
        this.searchMovieTxt.setText("");
        ArrayList<Movie> originalMovies = 
            (ArrayList<Movie>) new Write_ReadMovieToSqlImp().readMovieFromDS();
        this.classListMovie.setMovies(originalMovies);
        this.loadMovieToTables();
    }

    private void searchMovieByName() {
        String searchMovieInput = searchMovieTxt.getText();
        if (searchMovieInput.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, 
                    "VUI LÒNG NHẬP TÊN PHIM CẦN TÌM!");
        } else {
            classListMovie.searchMovies(searchMovieInput);
            this.loadMovieToTables();
        }
    }
    
    void addShowtimeCallBack(ShowTime showTime) {
        WriteReadShowTimeSQLImp wrShowTimeSQL = new WriteReadShowTimeSQLImp();
        wrShowTimeSQL.insertShowTimeToSQL(showTime);
        this.classListShowTime.addShowTime(showTime);
        loadShowTimeToTableOption(showTime, showTime.getRoom().getIdRoom());
    }

    

    private void loadDataFromSql() {
        readMoviesFromSql();
        readShowTimeFrom();
    }

    private void readShowTimeFrom() {
        WriteReadShowTimeSQLImp wrSQLShowTime = new WriteReadShowTimeSQLImp();
        classListShowTime.setClassListShowtime(wrSQLShowTime.readShowTimesFromSQL());
        updateIdShowTime();
        loadShowTimesToTable();
    }

    private void loadShowTimesToTable() {
        tableModelAllRoom.setRowCount(0);
        tableModelRoom1.setRowCount(0);
        tableModelRoom2.setRowCount(0);
        tableModelRoom3.setRowCount(0);
        tableModelRoom4.setRowCount(0);
        tableModelRoom5.setRowCount(0);
        for (ShowTime showTime : classListShowTime.getClassListShowtime()) {
            loadShowTimeToTableOption(showTime, showTime.getRoom().getIdRoom());
        }
    }
    
    private void loadShowTimeToTableOption(ShowTime showTime, String idRoom) {
        Object[] row = new Object[] {
            showTime.getMovie().getNameMovie(), showTime.getMovieFomart(),
            showTime.getMovie().getTime() + " phút",
            new SimpleDateFormat("HH:mm").format(showTime.getStartTime())
        };
        Object[] rowRoomAll = new Object[] {
            showTime.getMovie().getNameMovie(), showTime.getMovieFomart(),
            showTime.getMovie().getTime() + " phút",
            new SimpleDateFormat("HH:mm").format(showTime.getStartTime()),
            showTime.getRoom().getIdRoom().substring(4)
        };
        this.tableModelAllRoom.addRow(rowRoomAll);
        if (idRoom.substring(4).equals("1")) {
            this.tableModelRoom1.addRow(row);
        } else if (idRoom.substring(4).equals("2")) {
            this.tableModelRoom2.addRow(row);
        } else if (idRoom.substring(4).equals("3")) {
            this.tableModelRoom3.addRow(row);
        } else if (idRoom.substring(4).equals("4")) {
            this.tableModelRoom4.addRow(row);
        } else if (idRoom.substring(4).equals("5")) {
            this.tableModelRoom5.addRow(row);
        }
    }

    private void updateIdShowTime() {
        int maxIdST = Integer.MIN_VALUE;
        for (ShowTime showTime : classListShowTime.getClassListShowtime()) {
            if (Integer.parseInt(showTime.getIdShowTime()) > maxIdST) {
                maxIdST = Integer.parseInt(showTime.getIdShowTime());
            }
        }
        ShowTime.setIdAutoST(maxIdST + 1);
    }

    private void deleteShowTime() {
        if (roomAllTable.getSelectedRow() > -1) {
            this.selectRowTableSTALL = roomAllTable.getSelectedRow();
            sloveDetailDeleteST(selectRowTableSTALL);
        } else if (room1Table.getSelectedRow() > -1) {
            this.selectRowTableST1 = room1Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(selectRowTableST1, "ROOM1");
            sloveDetailDeleteST(selectIndex);
        } else if (room2Table.getSelectedRow() > -1) {
            this.selectRowTableST2 = room2Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(selectRowTableST2, "ROOM2");
            sloveDetailDeleteST(selectIndex);
        } else if (room3Table.getSelectedRow() > -1) {
            this.selectRowTableST3 = room3Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(selectRowTableST3, "ROOM3");
            sloveDetailDeleteST(selectIndex);
        } else if (room4Table.getSelectedRow() > -1) {
            this.selectRowTableST4 = room4Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(selectRowTableST4, "ROOM4");
            sloveDetailDeleteST(selectIndex);
        } else if (room5Table.getSelectedRow() > -1) {
            this.selectRowTableST5 = room5Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(selectRowTableST5, "ROOM5");
            sloveDetailDeleteST(selectIndex);
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    "VUI LÒNG CHỌN SUẤT CHIẾU CẦN XÓA!");
        }
        cancelSelectrowST();
    }
    
     private void cancelSelectrowST() {
        this.selectRowTableCus = -1;
        this.selectRowTableST1 = -1;
        this.selectRowTableST2 = -1;
        this.selectRowTableST3 = -1;
        this.selectRowTableST4 = -1;
        this.selectRowTableST5 = -1;
    }

    private void sloveDetailDeleteST(int indexRemove) {
        WriteReadShowTimeSQLImp wrSQLShomTime = new WriteReadShowTimeSQLImp();
        wrSQLShomTime.setIsDeleteST(this.classListShowTime.
                getClassListShowtime().get(indexRemove).getIdShowTime());
        refreshTableAllRoom();
    }

    private void refreshTableAllRoom() {
        WriteReadShowTimeSQLImp wrSQLShomTime = new WriteReadShowTimeSQLImp();
        this.classListShowTime.setClassListShowtime
        (wrSQLShomTime.readShowTimesFromSQL());
        loadShowTimesToTable();
    }

    private int changeSelectIndexToRoomALl(int selectRowTableST1, String idRoom) {
        int isFindIdRoom = -1;
        for (int i = 0; i < classListShowTime.getClassListShowtime().size(); i++) {
            if (classListShowTime.getClassListShowtime()
                    .get(i).getRoom().getIdRoom().equals(idRoom)) {
                isFindIdRoom++;
            }
            if (isFindIdRoom == selectRowTableST1) {
                return i;
            }
        }
        return -1;
    }

    private void updateShowTime() {
        if (roomAllTable.getSelectedRow() > -1) {
            this.selectRowTableSTALL = roomAllTable.getSelectedRow();
            ShowTime showTimeUpdate = this.classListShowTime.
                    getClassListShowtime().get(selectRowTableSTALL);
            UpdateShowtimeDialog updateSTDialog = new
         UpdateShowtimeDialog(this, true, showTimeUpdate, this);
            updateSTDialog.setVisible(true);
//            sloveDetailDeleteST(selectRowTableSTALL);
        } else if (room1Table.getSelectedRow() > -1) {
            this.selectRowTableST1 = room1Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(selectRowTableST1, "ROOM1");
//            sloveDetailDeleteST(selectIndex);
        } else if (room2Table.getSelectedRow() > -1) {
            this.selectRowTableST2 = room2Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(
                    selectRowTableST2, "ROOM2");
//            sloveDetailDeleteST(selectIndex);
        } else if (room3Table.getSelectedRow() > -1) {
            this.selectRowTableST3 = room3Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(
                    selectRowTableST3, "ROOM3");
            sloveDetailDeleteST(selectIndex);
        } else if (room4Table.getSelectedRow() > -1) {
            this.selectRowTableST4 = room4Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(
                    selectRowTableST4, "ROOM4");
//            sloveDetailDeleteST(selectIndex);
        } else if (room5Table.getSelectedRow() > -1) {
            this.selectRowTableST5 = room5Table.getSelectedRow();
            int selectIndex = changeSelectIndexToRoomALl(
                    selectRowTableST5, "ROOM5");
//            sloveDetailDeleteST(selectIndex);
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    "VUI LÒNG CHỌN SUẤT CHIẾU CẦN XÓA!");
        }
    }

    void updateShowtimeCallBack(ShowTime showTime) {
        int indexUpdateST = -1;
        for (int i = 0; i < classListShowTime.getClassListShowtime().size(); i++) {
            if (this.classListShowTime.getClassListShowtime().
                    get(i).getIdShowTime().equals(showTime.getIdShowTime())) {
                indexUpdateST = i;
            }
        }
        this.classListShowTime.updateST(indexUpdateST, showTime);
        WriteReadShowTimeSQLImp wrSQLShomTime = new WriteReadShowTimeSQLImp();
        wrSQLShomTime.updateShowTime(showTime);
        refreshTableAllRoom();
    }
}
