/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Java_project_SGU.GUI;

import Java_project_SGU.DAL.WriteReadShowTimeSQLImp;
import Java_project_SGU.Controller.MouseActionListenerChooseMovie;
import Java_project_SGU.BUS.ClassListShowTime;
import Java_project_SGU.BUS.Customer;
import Java_project_SGU.BUS.Movie;
import Java_project_SGU.BUS.ShowTime;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author ADMIN
 */
public class ChooseMovieDialog extends javax.swing.JDialog {
    private Movie movieBooking;
    private Customer customer;
    private ClassListShowTime classListShowTime;
    private CardLayout cardLayout1;
    private CardLayout cardLayout2;
    private List<JLabel> listHourLB;
    private List<JLabel> listRoomLB;
    
    //others
    /**
     * Creates new form chooseMovieDialog
     */
    public ChooseMovieDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        showAnimation();
        cardLayout1 = (CardLayout) this.areaCardLO1.getLayout();
        cardLayout2 = (CardLayout) this.areaCardLO2.getLayout();
    }
    
    public ChooseMovieDialog(java.awt.Frame parent, boolean modal, 
            Movie movieBooking, Customer customer) {
        this(parent, modal);
        this.movieBooking = movieBooking;
        this.customer = customer;
        loadListST_CorrespondingWithMovieSQL();
        initPageBookingMovie();
        addActionListener();
        this.listRoomLB = new ArrayList<>();
        this.listHourLB = new ArrayList<JLabel>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingPN = new javax.swing.JPanel();
        calendarLB = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        calandarTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        searchCalendarLB = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        imageMovieLB = new javax.swing.JLabel();
        fomart2PN = new javax.swing.JPanel();
        fomart2LB = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fomart1PN = new javax.swing.JPanel();
        fomart1LB = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        headingSTimePN2 = new javax.swing.JLabel();
        headingSTimePN1 = new javax.swing.JLabel();
        areaCardLO1 = new javax.swing.JPanel();
        chooseHoursPN1 = new javax.swing.JPanel();
        chooseRoomPN1 = new javax.swing.JPanel();
        areaCardLO2 = new javax.swing.JPanel();
        chooseHoursPN2 = new javax.swing.JPanel();
        chooseRoomPN2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chọn Phim");

        headingPN.setBackground(new java.awt.Color(153, 0, 153));

        calendarLB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        calendarLB.setForeground(new java.awt.Color(255, 255, 255));
        calendarLB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/calendar_choseeMovie.png"))); // NOI18N
        calendarLB.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        calendarLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DDH CINEMAR");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/movie_heading.png"))); // NOI18N

        calandarTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        calandarTxt.setForeground(new java.awt.Color(153, 153, 153));
        calandarTxt.setText("dd/mm/yyyy...");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));

        searchCalendarLB.setBackground(new java.awt.Color(255, 255, 255));
        searchCalendarLB.setForeground(new java.awt.Color(153, 0, 153));
        searchCalendarLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchCalendarLB.setText("TÌM KIẾM");
        searchCalendarLB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        searchCalendarLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchCalendarLB.setOpaque(true);

        javax.swing.GroupLayout headingPNLayout = new javax.swing.GroupLayout(headingPN);
        headingPN.setLayout(headingPNLayout);
        headingPNLayout.setHorizontalGroup(
            headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headingPNLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calendarLB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchCalendarLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calandarTxt))
                .addGap(10, 10, 10))
        );
        headingPNLayout.setVerticalGroup(
            headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headingPNLayout.createSequentialGroup()
                .addGroup(headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headingPNLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(headingPNLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(headingPNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(calandarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calendarLB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(4, 4, 4)
                .addComponent(searchCalendarLB, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        imageMovieLB.setText("..");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(imageMovieLB, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(imageMovieLB, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        fomart2PN.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 0, 153)));
        fomart2PN.setPreferredSize(new java.awt.Dimension(22, 35));

        fomart2LB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/arrow_down.png"))); // NOI18N

        javax.swing.GroupLayout fomart2PNLayout = new javax.swing.GroupLayout(fomart2PN);
        fomart2PN.setLayout(fomart2PNLayout);
        fomart2PNLayout.setHorizontalGroup(
            fomart2PNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fomart2PNLayout.createSequentialGroup()
                .addComponent(fomart2LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8))
        );
        fomart2PNLayout.setVerticalGroup(
            fomart2PNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fomart2PNLayout.createSequentialGroup()
                .addGroup(fomart2PNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fomart2LB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        fomart1PN.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 0, 153)));

        fomart1LB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java_project_SGU/Image/arrow_down.png"))); // NOI18N

        javax.swing.GroupLayout fomart1PNLayout = new javax.swing.GroupLayout(fomart1PN);
        fomart1PN.setLayout(fomart1PNLayout);
        fomart1PNLayout.setHorizontalGroup(
            fomart1PNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fomart1PNLayout.createSequentialGroup()
                .addComponent(fomart1LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10))
        );
        fomart1PNLayout.setVerticalGroup(
            fomart1PNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fomart1PNLayout.createSequentialGroup()
                .addGroup(fomart1PNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fomart1LB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        headingSTimePN2.setBackground(new java.awt.Color(255, 153, 0));
        headingSTimePN2.setForeground(new java.awt.Color(255, 255, 255));
        headingSTimePN2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingSTimePN2.setText("Xuất chiếu");
        headingSTimePN2.setOpaque(true);

        headingSTimePN1.setBackground(new java.awt.Color(255, 153, 0));
        headingSTimePN1.setForeground(new java.awt.Color(255, 255, 255));
        headingSTimePN1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingSTimePN1.setText("Xuất chiếu");
        headingSTimePN1.setOpaque(true);

        areaCardLO1.setLayout(new java.awt.CardLayout());

        chooseHoursPN1.setBackground(new java.awt.Color(51, 0, 51));
        chooseHoursPN1.setForeground(new java.awt.Color(255, 255, 255));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 20);
        flowLayout1.setAlignOnBaseline(true);
        chooseHoursPN1.setLayout(flowLayout1);
        areaCardLO1.add(chooseHoursPN1, "card2");

        chooseRoomPN1.setBackground(new java.awt.Color(51, 0, 51));

        javax.swing.GroupLayout chooseRoomPN1Layout = new javax.swing.GroupLayout(chooseRoomPN1);
        chooseRoomPN1.setLayout(chooseRoomPN1Layout);
        chooseRoomPN1Layout.setHorizontalGroup(
            chooseRoomPN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        chooseRoomPN1Layout.setVerticalGroup(
            chooseRoomPN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        areaCardLO1.add(chooseRoomPN1, "card3");

        areaCardLO2.setLayout(new java.awt.CardLayout());

        chooseHoursPN2.setBackground(new java.awt.Color(51, 0, 51));

        javax.swing.GroupLayout chooseHoursPN2Layout = new javax.swing.GroupLayout(chooseHoursPN2);
        chooseHoursPN2.setLayout(chooseHoursPN2Layout);
        chooseHoursPN2Layout.setHorizontalGroup(
            chooseHoursPN2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        chooseHoursPN2Layout.setVerticalGroup(
            chooseHoursPN2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        areaCardLO2.add(chooseHoursPN2, "card2");

        chooseRoomPN2.setBackground(new java.awt.Color(51, 0, 51));
        chooseRoomPN2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout chooseRoomPN2Layout = new javax.swing.GroupLayout(chooseRoomPN2);
        chooseRoomPN2.setLayout(chooseRoomPN2Layout);
        chooseRoomPN2Layout.setHorizontalGroup(
            chooseRoomPN2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        chooseRoomPN2Layout.setVerticalGroup(
            chooseRoomPN2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        areaCardLO2.add(chooseRoomPN2, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headingPN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(headingSTimePN1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addComponent(fomart1PN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(areaCardLO1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(fomart2PN, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addComponent(headingSTimePN2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(areaCardLO2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headingPN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fomart1PN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(headingSTimePN1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(areaCardLO1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(fomart2PN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(headingSTimePN2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(areaCardLO2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseMovieDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseMovieDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseMovieDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseMovieDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChooseMovieDialog dialog = new ChooseMovieDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel areaCardLO1;
    private javax.swing.JPanel areaCardLO2;
    private javax.swing.JTextField calandarTxt;
    private javax.swing.JLabel calendarLB;
    private javax.swing.JPanel chooseHoursPN1;
    private javax.swing.JPanel chooseHoursPN2;
    private javax.swing.JPanel chooseRoomPN1;
    private javax.swing.JPanel chooseRoomPN2;
    private javax.swing.JLabel fomart1LB;
    private javax.swing.JPanel fomart1PN;
    private javax.swing.JLabel fomart2LB;
    private javax.swing.JPanel fomart2PN;
    private javax.swing.JPanel headingPN;
    private javax.swing.JLabel headingSTimePN1;
    private javax.swing.JLabel headingSTimePN2;
    private javax.swing.JLabel imageMovieLB;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel searchCalendarLB;
    // End of variables declaration//GEN-END:variables

    private void initPageBookingMovie() {
        this.imageMovieLB.setIcon(new ImageIcon(this.movieBooking.getLinkImage()));
        this.fomart1PN.setEnabled(false);
        this.fomart2PN.setEnabled(false);
    }

    private void loadListST_CorrespondingWithMovieSQL() {
        this.classListShowTime = new ClassListShowTime();
        WriteReadShowTimeSQLImp wrShowTimeSQL = new WriteReadShowTimeSQLImp();
        this.classListShowTime.setClassListShowtime(wrShowTimeSQL.
                readListST_CorrespondingWithMovie(this.movieBooking.getIdMovie()));
    }

    public JLabel getCalendarLB() {
        return calendarLB;
    }

    public JTextField getCalandarTxt() {
        return calandarTxt;
    }

    public JPanel getFomart1PN() {
        return fomart1PN;
    }

    public JLabel getSearchCalendarLB() {
        return searchCalendarLB;
    }

    public JPanel getFomart2PN() {
        return fomart2PN;
    }
    
    public void showCalendarLB() {
        new Thread (new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 22; i++) {
                    try {
                        searchCalendarLB.setSize(101, i);
                        Thread.sleep(30);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }).start();
    }

    private void addActionListener() {
        MouseActionListenerChooseMovie mouseEvent =
                new MouseActionListenerChooseMovie(this);
        this.calendarLB.addMouseListener(mouseEvent);
        this.calandarTxt.addMouseListener(mouseEvent);
        this.fomart1PN.addMouseListener(mouseEvent);
        this.fomart2PN.addMouseListener(mouseEvent);
        this.searchCalendarLB.addMouseListener(mouseEvent);
    }

    private void showAnimation() {
        showSTHeadingPN(1);
        showSTHeadingPN(2);
        showChooseHoursPN();
        showChooseHoursPN2();
//        chooseHoursPN1.setPreferredSize(new Dimension(501, 27));
//        chooseHoursPN1.setSize(501, 27);
//        chooseHoursPN1.setMaximumSize(new Dimension(501, 27));
//        chooseHoursPN1.setMinimumSize(new Dimension(501, 27));
    }

    /*
        hiển thị panel fomart 1
    */
    
    public int FilterCalendarShowTime() {
        Font font = new Font("Arial", Font.BOLD, 14);
        List<ShowTime> listSTFilter = new ArrayList<>();
        boolean isFilterDateSuccess = false;
        boolean isHave2D = false, isHave3D = false;
        for (ShowTime showTime : classListShowTime.getClassListShowtime()) {
            if (new SimpleDateFormat("dd/MM/yyyy").format(showTime.
                    getStartTime()).equals(this.calandarTxt.getText())) {
                listSTFilter.add(showTime);
                if (showTime.getMovieFomart().equals("2D")) {
                    this.fomart1LB.setText("2D - " + movieBooking.getLaguage());
                    this.fomart1LB.setFont(font);
                    this.fomart1LB.setForeground(Color.BLACK);
                    isHave2D = true;
                } else if (showTime.getMovieFomart().equals("3D")) {
                    this.fomart2LB.setText("3D - " + movieBooking.getLaguage());
                    this.fomart2LB.setFont(font);
                    this.fomart2LB.setForeground(Color.BLACK);
                    isHave3D = true;
                }
                isFilterDateSuccess = true;
            }
        }
        if (isFilterDateSuccess) {
            this.classListShowTime.setClassListShowtime(listSTFilter);
            if (isHave2D == true && isHave3D == false)return 1;
            if (isHave2D == false && isHave3D == true)return 2;
            if (isHave2D == true && isHave3D == true)return 3;
        } else {
            JOptionPane.showMessageDialog(rootPane, "Rất tiếc, "
                    + "không có suất chiếu vào ngày này!");
                this.fomart1LB.setText("");
                this.fomart1LB.setText("");
                return 0;
        }
        return 0;
    }
    //501/110
    
    private void showSTHeadingPN(int option) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 27; i++) {
                    if (option == 1) {
                        headingSTimePN1.setSize(501, i);
                    } else if (option == 2) {
                        headingSTimePN2.setSize(501, i);
                    }
                    try {
                        Thread.sleep(20);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        t.start();
    }

    private void showChooseHoursPN() {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 110; i++) {
                    chooseHoursPN1.setSize(501, i);
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        t.start();
    }
    
    private void showChooseHoursPN2() {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 110; i++) {
                    chooseHoursPN2.setSize(501, i);
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        t.start();
    }
    
    private void showChooseRoomPN1() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 110; i++) {
                    chooseRoomPN1.setSize(501, i);
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }).start();
    }
    
    private void showChooseRoomPN2() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i <= 110; i++) {
                    chooseRoomPN2.setSize(501, i);
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }).start();
    }

    public void showPanelAccorCalendarLB () {
      new Thread(new Runnable() {
          @Override
          public void run() {
               for (int i = 0; i <= 22; i++) {
                    try {
                        headingPN.setSize(830, 61 + i);
                        Thread.sleep(30);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
          }
      }).start();
    }

    public void filterHoursToPN1() {
        this.cardLayout1.first(areaCardLO1);
        listHourLB = new ArrayList<>();
        Font myFont = new Font("Arial", Font.BOLD, 14);
        for (ShowTime showTime : this.classListShowTime.getClassListShowtime()) {
            if (showTime.getMovieFomart().equals("2D")) {
                 JLabel hourShowTimeLB = new JLabel(new SimpleDateFormat
                ("HH:mm").format(showTime.getStartTime()));
                hourShowTimeLB.setFont(myFont);
                hourShowTimeLB.setForeground(Color.WHITE);
                hourShowTimeLB.setBackground(new java.awt.Color(51, 0, 51));
                hourShowTimeLB.setOpaque(true);
                hourShowTimeLB.setCursor(new Cursor(Cursor.HAND_CURSOR));
                listHourLB.add(hourShowTimeLB);
                this.chooseHoursPN1.add(hourShowTimeLB);
            }
        }
    }

    public void filterHoursToPN2() {
        this.cardLayout1.first(areaCardLO1);
        this.chooseHoursPN2.setLayout(new FlowLayout(1, 20, 20));
        Font myFont = new Font("Arial", Font.BOLD, 14);
        for (ShowTime showTime : this.classListShowTime.getClassListShowtime()) {
            if (showTime.getMovieFomart().equals("3D")) {
                 JLabel hourShowTimeLB = new JLabel(new SimpleDateFormat
                ("HH:mm").format(showTime.getStartTime()));
                hourShowTimeLB.setFont(myFont);
                hourShowTimeLB.setForeground(Color.WHITE);
                hourShowTimeLB.setBackground(new java.awt.Color(51, 0, 51));
                hourShowTimeLB.setOpaque(true);
                hourShowTimeLB.setCursor(new Cursor(Cursor.HAND_CURSOR));
                listHourLB.add(hourShowTimeLB);
                this.chooseHoursPN2.add(hourShowTimeLB);
            }
        }
    }

    public void changeColorHourLB(Object src) {
        for (JLabel hourLB: this.listHourLB) {
            if (hourLB.equals(src)) {
                hourLB.setForeground(new java.awt.Color(51,0,51));
                hourLB.setBackground(Color.WHITE);
            }
        }
        for (JLabel roomLB: this.listRoomLB) {
            if (roomLB.equals(src)) {
                roomLB.setForeground(new java.awt.Color(51,0,51));
                roomLB.setBackground(Color.WHITE);
            }
        }
    }
    
    public void changeOrigColorHourLB(Object src) {
        for (JLabel hourLB: this.listHourLB) {
            if (hourLB.equals(src)) {
                hourLB.setForeground(Color.WHITE);
                hourLB.setBackground(new java.awt.Color(51,0,51));
            }
        }
        for (JLabel hourLB: this.listRoomLB) {
            if (hourLB.equals(src)) {
                hourLB.setBackground(new java.awt.Color(51,0,51));
                hourLB.setForeground(Color.WHITE);
            }
        }
    }

    public void addActionToListLB() { 
        MouseActionListenerChooseMovie mouseEvent =
                new MouseActionListenerChooseMovie(this);
        for (JLabel hoursChooseLabel : listHourLB) {
            hoursChooseLabel.addMouseListener(mouseEvent);
        }
    }

    public void showCardRoomLOut(Object srcLB) {
        int optionFormart = 1; // chon formar 1
        ArrayList<ShowTime> listSTFilterHours = new ArrayList<>();
        if (this.chooseHoursPN1.isAncestorOf((Component) srcLB)) {
            optionFormart = 1;
            JLabel srcCastLB = (JLabel) srcLB;
            for (int i = 0; i < this.classListShowTime.
                    getClassListShowtime().size(); i++) {
                if (classListShowTime.getClassListShowtime().get(i).
                        getMovieFomart().equals("2D") && 
                        srcCastLB.getText().equals(new 
                    SimpleDateFormat("HH:mm").format(classListShowTime.
                    getClassListShowtime().get(i).getStartTime()))) {
                    
                        this.cardLayout1.last(areaCardLO1);
                        listSTFilterHours.add(classListShowTime.getClassListShowtime().get(i));
                        showChooseRoomPN1();
                        areaCardLO2.setVisible(false);
                        headingSTimePN2.setVisible(false);
                        fomart2PN.setVisible(false);
                }
            }
            classListShowTime.setClassListShowtime(listSTFilterHours);
            filterRoomToPN(optionFormart);
        } else if (this.chooseHoursPN2.isAncestorOf((Component) srcLB)) {
            optionFormart = 2;
            JLabel srcCastLB = (JLabel) srcLB;
            for (int i = 0; i < this.classListShowTime.
                    getClassListShowtime().size(); i++) {
                if (classListShowTime.getClassListShowtime().get(i).
                        getMovieFomart().equals("3D") && 
                        srcCastLB.getText().equals(new 
                    SimpleDateFormat("HH:mm").format(classListShowTime.
                    getClassListShowtime().get(i).getStartTime()))) {
                        this.cardLayout2.last(areaCardLO2);
                        listSTFilterHours.add(classListShowTime.getClassListShowtime().get(i));
                        showChooseRoomPN2();
                        areaCardLO1.setVisible(false);
                        headingSTimePN1.setVisible(false);
                        fomart1PN.setVisible(false);
                }
            }
            classListShowTime.setClassListShowtime(listSTFilterHours);
            filterRoomToPN(optionFormart);
        }
    }
    
    public void filterRoomToPN(int optionFormart) {
        listRoomLB = new ArrayList<>();
        Font myFont = new Font("Arial", Font.BOLD, 14);
        this.chooseRoomPN1.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        this.chooseRoomPN2.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        for (ShowTime showTime : this.classListShowTime.getClassListShowtime()) {
            System.out.println(new SimpleDateFormat("HH:mm").format(showTime.getStartTime()));
            JLabel choseeRoomLB = new JLabel(showTime.getRoom().getIdRoom());
            choseeRoomLB.setFont(myFont);
            choseeRoomLB.setForeground(Color.WHITE);
            choseeRoomLB.setBackground(new java.awt.Color(51, 0, 51));
            choseeRoomLB.setOpaque(true);
            choseeRoomLB.setCursor(new Cursor(Cursor.HAND_CURSOR));
            listRoomLB.add(choseeRoomLB);
            if (optionFormart == 1) {
                this.chooseRoomPN1.add(choseeRoomLB);
            } else if (optionFormart == 2) {
                this.chooseRoomPN2.add(choseeRoomLB);
            }
        }
        //addActionRoomLB
        MouseActionListenerChooseMovie mouseEvent = new
            MouseActionListenerChooseMovie(this);
        for (JLabel roomLB : this.listRoomLB) {
            roomLB.addMouseListener(mouseEvent);
        }
    }

    public void displayChooseSeatDialog(Object src) {
        if (this.chooseRoomPN2.isAncestorOf((Component) src)
                || this.chooseRoomPN1.isAncestorOf((Component) src)) {
            JLabel srcLB = (JLabel) src;
            for (ShowTime showTime : this.classListShowTime.getClassListShowtime()) {
                if (srcLB.getText().equals(showTime.getRoom().getIdRoom())) {
                    BookTicketView bookTicketView = new BookTicketView(this,
                            rootPaneCheckingEnabled, customer, showTime);
                    bookTicketView.setVisible(true); 
                } 
            }
        }
    }
}
